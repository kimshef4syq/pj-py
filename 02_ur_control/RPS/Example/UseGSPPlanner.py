"""
As a integrad planner, we should treat each component of CartesianPlanner carefully.
As the front-end path search planner, the optimality of path generated by GSPPlanner
should be evaluated. 

1. do a 2 waypoint test and manully find the shortest path
"""
from RVBUST.RCI import *
from RVBUST.RPS import *

USE_VIS = True
USE_REAL_ROBOT = False
SPEED_RATIO = 1.0
JOINT_TRAJ_VELOCITY = 3.0
HOME_JOINT = Rx([0, 0, 0, 0, 0, 0])

TCP_VELOCITY = 0.14

logger = Logger.GetConsoleLogger("logger")
logger.SetLevelForAll(Logger.LoggerLevel_Info)


def CalcDistanceCost(qlist, dof_weights):
    distance = []
    costs = []
    cost = 0
    for i in range(len(qlist) - 1):
        d = (qlist[i + 1] - qlist[i]).WeightedNorm(dof_weights)
        cost += d
        distance.append(d)
        costs.append(cost)

    return distance, costs


def PlotDistanceCost(qlist, dof_weights, name):
    from matplotlib import pyplot as plt

    fig = plt.figure()
    fig.suptitle(name, fontsize=20)
    ax_distance = fig.add_subplot(1, 2, 1)
    ax_cost = fig.add_subplot(1, 2, 2)

    distances, costs = CalcDistanceCost(qlist, dof_weights)
    ax_distance.plot(np.asarray(distances))
    ax_cost.plot(np.asarray(costs))
    plt.show()


def SolveJointPositions(env, manipulator, waypoints, joint_seed):
    kin_solver = CreateKinSolver(manipulator)
    qlist = []
    q = joint_seed
    for w in waypoints:
        _, res, _ = kin_solver.GetNearestIK(Pose(w), q)
        if res.success:
            q = res[0]
            qlist.append(q)
        else:
            print("nearest IK failed for pose " + str(Pose(w)))
            return False, None

    return True, qlist


def SolveJointPositionsGSPGluing(env, manipulator, waypoints):

    gsp_planner = GSPPlanner(manipulator, env)

    configuration = gsp_planner.GetDefaultConfiguration()
    configuration.check_collision = False
    configuration.bound_joint_velocity = False
    # configuration.graphviz_name = "test_gsp_gluing"
    gsp_planner.SetConfiguration(configuration)

    num_task_redundancy_samples = 30
    region_lb = SE3Tangent([0, 0, 0, 0, 0, -np.pi/3])
    region_ub = SE3Tangent([0, 0, 0, 0, 0, np.pi/3])

    # time constraint is unused here
    viapoints = [
        CartesianRegion(waypoint, region_lb, region_ub,
                        num_task_redundancy_samples, TimeConstraint(1.0)) for waypoint in waypoints
    ]

    request = MotionPlannerRequest()
    request.viapoints = viapoints
    res, response = gsp_planner.Solve(request, verbose=True)

    qlist = response.joint_trajectory
    return res, qlist


env = Environment()
if USE_VIS:
    rvis = RobotVis()
    rvis.LoadEnvironment(env)
robot_model = RobotModel()
robot_model.InitFromRVDF(
    GetDataPath() + "/Multibody/RobotModels/Motoman/GP7/GP7.rvdf")
env.AddBody(robot_model)
manipulator = robot_model.GetActiveManipulator()

controller = SimController.Create(manipulator)
controller.Connect()
controller.EnableRobot()
controller.MoveJoints(HOME_JOINT)

logger.Info(
    "\n****************************** gluing waypoints test ***************************\n")

TCP = Pose([0, 0.017, 0.1406, 0.5, -0.5, -0.5, 0.5])
manipulator.SetTCP(TCP)
wps_raw = np.loadtxt(
    GetDataPath() + "Projects/ShoesGluing_FanQin/Waypoints/poses_r3xso3.txt")
hs = []
wps = []
for wp in wps_raw:
    if USE_VIS:
        hs.append(rvis.PlotFrame(Pose(wp), 0.04, 1))
    wps.append(Pose(wp))

res, qlist_gsp = SolveJointPositionsGSPGluing(env, manipulator, wps)
assert res == True, "gsp solve failed"
# res, qlist_cp = SolveJointPositionsCPGluing(env, manipulator, wps)
# assert res == True, "cartesian planner solve failed"

res, qlist = SolveJointPositions(
    env, manipulator, wps, joint_seed=HOME_JOINT)

dof_weights = manipulator.GetDoFWeights()

PlotDistanceCost(qlist_gsp, dof_weights=dof_weights, name="with GSP")
PlotDistanceCost(qlist, dof_weights=dof_weights, name="without GSP")

logger.Info(
    f"gsp planner solved joint path cost: {CalcDistanceCost(qlist_gsp, dof_weights)[1][-1]}")
logger.Info(
    f"dummy planner solved joint path cost: {CalcDistanceCost(qlist, dof_weights)[1][-1]}")
